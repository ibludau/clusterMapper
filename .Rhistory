load_all()
library(devtools)
load_all()
testData <- complexExample
testMap <- mapClusters(testData)
View(testMap)
data <- copy(testData)
library(data.table)
data <- copy(testData)
Collapsed_Peptide_unique = unique(data$Collapsed_Peptide)
cluster_new = numeric(nrow(data))
count_oneCluster=0
for (i in 1:length(Collapsed_Peptide_unique)){
print(i)
sub = subset(data,Collapsed_Peptide == Collapsed_Peptide_unique[i])
idx_cp <- which((data$Collapsed_Peptide == Collapsed_Peptide_unique[i])) # data table indeces for current collapsed_peptide
runID_unique = unique(sub$run_id) # all run_ids for the current collapsed_peptide
num_clusters = numeric(length(runID_unique)) # empty vector to count number of clusers in each run_id
for (j in 1:length(runID_unique)){
sub_run = subset(sub,run_id == runID_unique[j])
num_clusters[j] = length(unique(sub_run$Cluster))
rm(sub_run)
}
if ((length(unique(num_clusters)) == 1) & (num_clusters[1] == 1)){ # if only one cluster in all runs
count_oneCluster = count_oneCluster+1
#print(paste0("only one cluster ",i))
sel_idx = which(data$Collapsed_Peptide == Collapsed_Peptide_unique[i]) # get all indeces for the current collapsed_peptide
cluster_new[sel_idx] = 1
} else { # more than one cluster
most_frequent_num_clusters = sort(table(num_clusters),decreasing=TRUE)[1]  #get most frequent number of clusters, in cases of multiple resuts take lowest cluster number
#ref_run = runID_unique[which(num_clusters == as.integer(names(most_frequent_num_clusters)))[1]] #first run with most common cluster number
possible_ref_runs = runID_unique[which(num_clusters == as.integer(names(most_frequent_num_clusters)))] #get all possible reference runs which have most_frequent_num_clusters
if (length(possible_ref_runs) == 1){
ref_run = possible_ref_runs
} else {
num_ids = numeric(length(possible_ref_runs))
for(pos_r_r_idx in 1:length(possible_ref_runs)){
num_ids[pos_r_r_idx]=length(unique(sub$transition_group_id[sub$run_id == possible_ref_runs[pos_r_r_idx]]))
}
max_idx = which(num_ids == max(num_ids))
ref_run = possible_ref_runs[max_idx[1]]
}
sub_ref_run = subset(sub,run_id == ref_run)
#res <- rbind(res,sub_ref_run)
clusterNum_ref = as.numeric(names(most_frequent_num_clusters)[1])
runID_test = runID_unique[-which(runID_unique == ref_run)]
idx_ref_run <- which(data$run_id == ref_run)
ref_cluster = unique(sub_ref_run$Cluster)
#####
#RT sort
RT <- numeric(clusterNum_ref)
for (ref_clust in 1:clusterNum_ref) {
idx_ref_clust_sort <- which(data$Cluster == ref_cluster[ref_clust])
RT[ref_clust] <- mean(data$RT[Reduce(intersect, list(idx_cp,idx_ref_run,idx_ref_clust_sort))])
}
ref_cluster = ref_cluster[sort.int(RT, index.return=TRUE)$ix]
####
if (length(runID_test) == 0){
#cluster_new[which((data$Collapsed_Peptide == Collapsed_Peptide_unique[i]) & (data$run_id == ref_run))] = as.integer(gsub("cluster","",data$Cluster[which((data$Collapsed_Peptide == Collapsed_Peptide_unique[i]) & (data$run_id == ref_run))])) +1
cluster_new[intersect(idx_cp,idx_ref_run)] = as.integer(gsub("cluster","",data$Cluster[intersect(idx_cp,idx_ref_run)])) +1 # more efficient than the one above
} else {
for (k in 1:length(runID_test)){ # go over all non-reference runs
sub_run = subset(sub,run_id == runID_test[k])
idx_test_run <- which(data$run_id == runID_test[k])
test_cluster = unique(sub_run$Cluster)
clusterNum_test = length(test_cluster)
if ((clusterNum_ref == 1)&(clusterNum_test == 1)) {
idx_ref_cluster <- which(data$Cluster == ref_cluster[1])
cluster_new[Reduce(intersect, list(idx_cp,idx_ref_run,idx_ref_cluster))] = 1
idx_test_cluster <- which(data$Cluster == test_cluster[1])
cluster_new[Reduce(intersect, list(idx_cp,idx_test_run,idx_test_cluster))] = 1
} else {
vote=matrix(data=0,nrow=clusterNum_ref[1],ncol=clusterNum_test[1])
for (l in 1:clusterNum_ref[1]) { # go through all clusters in reference
#ref_ids = subset(sub_ref_run,Cluster == paste0("cluster",l-1))$transition_group_id
ref_ids = subset(sub_ref_run,Cluster == ref_cluster[l])$transition_group_id
if(length(ref_ids) < 2) { ################# @TODO think about this!!!!!!!!!!
next
}
idx_ref_cluster <- which(data$Cluster == ref_cluster[l])
#cluster_new[which((data$Collapsed_Peptide == Collapsed_Peptide_unique[i]) & (data$run_id == ref_run) & (data$Cluster == paste0("cluster",l-1)))] = l
cluster_new[Reduce(intersect, list(idx_cp,idx_ref_run,idx_ref_cluster))] = l
for (m in 1:clusterNum_test[1]) {
test_ids = subset(sub_run,Cluster == test_cluster[m])$transition_group_id
idx_test_cluster <- which(data$Cluster == test_cluster[m])
if(length(test_ids) < 2) {
next
}
for (n in 1:length(test_ids)){ # go over all treansition_group_ids in test run
if (test_ids[n] %in% ref_ids){
vote[l,m] = vote[l,m]+1
#print(paste0(vote[l,m], " and ",length(test_ids), " and ",test_ids[n]))
}
if (vote[l,m] > length(test_ids)/2) {
#cluster_new[which((data$Collapsed_Peptide == Collapsed_Peptide_unique[i]) & (data$run_id == runID_test[k]) & (data$Cluster == paste0("cluster",m-1)))] = l
cluster_new[Reduce(intersect, list(idx_cp,idx_test_run,idx_test_cluster))] = l # more efficient
#print(paste0("break ",l," ",m))
break
}
}
}
}
}
}
}
}
}
data$cluster_new = cluster_new
View(data)
dataMapped <- testMap
rename_idx <- which(names(dataMapped) == "Collapsed_Peptide")[2]
names(dataMapped)[rename_idx] = "Collapsed_Peptide_2"
rename_idx <- which(names(dataMapped) == "run_id")[2]
names(dataMapped)[rename_idx] = "run_id_2"
#dataMapped$run_id <- gsub("0_","",dataMapped$run_id)
#dataMapped$run_id <- as.numeric(dataMapped$run_id)
dataMapped$run_id <- dataMapped$run_id_2
old_new_merge = merge(dataMapped, data, by=c("transition_group_id","run_id","Collapsed_Peptide"))
sel_diff <- which(old_new_merge$cluster_new != old_new_merge$new_cluster)
diff <- old_new_merge[sel_diff]
View(subset(old_new_merge,select=c("cluster_new","new_cluster")))
testData <- exampleDataFiltered
testMap <- mapClusters(testData)
data <- copy(testData)
Collapsed_Peptide_unique = unique(data$Collapsed_Peptide)
cluster_new = numeric(nrow(data))
count_oneCluster=0
for (i in 1:length(Collapsed_Peptide_unique)){
print(i)
sub = subset(data,Collapsed_Peptide == Collapsed_Peptide_unique[i])
idx_cp <- which((data$Collapsed_Peptide == Collapsed_Peptide_unique[i])) # data table indeces for current collapsed_peptide
runID_unique = unique(sub$run_id) # all run_ids for the current collapsed_peptide
num_clusters = numeric(length(runID_unique)) # empty vector to count number of clusers in each run_id
for (j in 1:length(runID_unique)){
sub_run = subset(sub,run_id == runID_unique[j])
num_clusters[j] = length(unique(sub_run$Cluster))
rm(sub_run)
}
if ((length(unique(num_clusters)) == 1) & (num_clusters[1] == 1)){ # if only one cluster in all runs
count_oneCluster = count_oneCluster+1
#print(paste0("only one cluster ",i))
sel_idx = which(data$Collapsed_Peptide == Collapsed_Peptide_unique[i]) # get all indeces for the current collapsed_peptide
cluster_new[sel_idx] = 1
} else { # more than one cluster
most_frequent_num_clusters = sort(table(num_clusters),decreasing=TRUE)[1]  #get most frequent number of clusters, in cases of multiple resuts take lowest cluster number
#ref_run = runID_unique[which(num_clusters == as.integer(names(most_frequent_num_clusters)))[1]] #first run with most common cluster number
possible_ref_runs = runID_unique[which(num_clusters == as.integer(names(most_frequent_num_clusters)))] #get all possible reference runs which have most_frequent_num_clusters
if (length(possible_ref_runs) == 1){
ref_run = possible_ref_runs
} else {
num_ids = numeric(length(possible_ref_runs))
for(pos_r_r_idx in 1:length(possible_ref_runs)){
num_ids[pos_r_r_idx]=length(unique(sub$transition_group_id[sub$run_id == possible_ref_runs[pos_r_r_idx]]))
}
max_idx = which(num_ids == max(num_ids))
ref_run = possible_ref_runs[max_idx[1]]
}
sub_ref_run = subset(sub,run_id == ref_run)
#res <- rbind(res,sub_ref_run)
clusterNum_ref = as.numeric(names(most_frequent_num_clusters)[1])
runID_test = runID_unique[-which(runID_unique == ref_run)]
idx_ref_run <- which(data$run_id == ref_run)
ref_cluster = unique(sub_ref_run$Cluster)
#####
#RT sort
RT <- numeric(clusterNum_ref)
for (ref_clust in 1:clusterNum_ref) {
idx_ref_clust_sort <- which(data$Cluster == ref_cluster[ref_clust])
RT[ref_clust] <- mean(data$RT[Reduce(intersect, list(idx_cp,idx_ref_run,idx_ref_clust_sort))])
}
ref_cluster = ref_cluster[sort.int(RT, index.return=TRUE)$ix]
####
if (length(runID_test) == 0){
#cluster_new[which((data$Collapsed_Peptide == Collapsed_Peptide_unique[i]) & (data$run_id == ref_run))] = as.integer(gsub("cluster","",data$Cluster[which((data$Collapsed_Peptide == Collapsed_Peptide_unique[i]) & (data$run_id == ref_run))])) +1
cluster_new[intersect(idx_cp,idx_ref_run)] = as.integer(gsub("cluster","",data$Cluster[intersect(idx_cp,idx_ref_run)])) +1 # more efficient than the one above
} else {
for (k in 1:length(runID_test)){ # go over all non-reference runs
sub_run = subset(sub,run_id == runID_test[k])
idx_test_run <- which(data$run_id == runID_test[k])
test_cluster = unique(sub_run$Cluster)
clusterNum_test = length(test_cluster)
if ((clusterNum_ref == 1)&(clusterNum_test == 1)) {
idx_ref_cluster <- which(data$Cluster == ref_cluster[1])
cluster_new[Reduce(intersect, list(idx_cp,idx_ref_run,idx_ref_cluster))] = 1
idx_test_cluster <- which(data$Cluster == test_cluster[1])
cluster_new[Reduce(intersect, list(idx_cp,idx_test_run,idx_test_cluster))] = 1
} else {
vote=matrix(data=0,nrow=clusterNum_ref[1],ncol=clusterNum_test[1])
for (l in 1:clusterNum_ref[1]) { # go through all clusters in reference
#ref_ids = subset(sub_ref_run,Cluster == paste0("cluster",l-1))$transition_group_id
ref_ids = subset(sub_ref_run,Cluster == ref_cluster[l])$transition_group_id
if(length(ref_ids) < 2) { ################# @TODO think about this!!!!!!!!!!
next
}
idx_ref_cluster <- which(data$Cluster == ref_cluster[l])
#cluster_new[which((data$Collapsed_Peptide == Collapsed_Peptide_unique[i]) & (data$run_id == ref_run) & (data$Cluster == paste0("cluster",l-1)))] = l
cluster_new[Reduce(intersect, list(idx_cp,idx_ref_run,idx_ref_cluster))] = l
for (m in 1:clusterNum_test[1]) {
test_ids = subset(sub_run,Cluster == test_cluster[m])$transition_group_id
idx_test_cluster <- which(data$Cluster == test_cluster[m])
if(length(test_ids) < 2) {
next
}
for (n in 1:length(test_ids)){ # go over all treansition_group_ids in test run
if (test_ids[n] %in% ref_ids){
vote[l,m] = vote[l,m]+1
#print(paste0(vote[l,m], " and ",length(test_ids), " and ",test_ids[n]))
}
if (vote[l,m] > length(test_ids)/2) {
#cluster_new[which((data$Collapsed_Peptide == Collapsed_Peptide_unique[i]) & (data$run_id == runID_test[k]) & (data$Cluster == paste0("cluster",m-1)))] = l
cluster_new[Reduce(intersect, list(idx_cp,idx_test_run,idx_test_cluster))] = l # more efficient
#print(paste0("break ",l," ",m))
break
}
}
}
}
}
}
}
}
}
data$cluster_new = cluster_new
rename_idx <- which(names(dataMapped) == "Collapsed_Peptide")[2]
names(dataMapped)[rename_idx] = "Collapsed_Peptide_2"
rename_idx <- which(names(dataMapped) == "run_id")[2]
names(dataMapped)[rename_idx] = "run_id_2"
#dataMapped$run_id <- gsub("0_","",dataMapped$run_id)
#dataMapped$run_id <- as.numeric(dataMapped$run_id)
dataMapped$run_id <- dataMapped$run_id_2
old_new_merge = merge(dataMapped, data, by=c("transition_group_id","run_id","Collapsed_Peptide"))
sel_diff <- which(old_new_merge$cluster_new != old_new_merge$new_cluster)
diff <- old_new_merge[sel_diff]
dataMapped <- testMap
rename_idx <- which(names(dataMapped) == "Collapsed_Peptide")[2]
names(dataMapped)[rename_idx] = "Collapsed_Peptide_2"
rename_idx <- which(names(dataMapped) == "run_id")[2]
names(dataMapped)[rename_idx] = "run_id_2"
#dataMapped$run_id <- gsub("0_","",dataMapped$run_id)
#dataMapped$run_id <- as.numeric(dataMapped$run_id)
dataMapped$run_id <- dataMapped$run_id_2
old_new_merge = merge(dataMapped, data, by=c("transition_group_id","run_id","Collapsed_Peptide"))
sel_diff <- which(old_new_merge$cluster_new != old_new_merge$new_cluster)
diff <- old_new_merge[sel_diff]
sel_diff
